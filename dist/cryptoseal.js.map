{"version":3,"file":"cryptoseal.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAoB,WAAID,IAExBD,EAAiB,WAAIC,GACtB,CATD,CASGK,MAAM,I,wCCPTC,OAAOC,eAAeN,EAAS,aAAc,CAC3CO,OAAO,IAETP,EAAQQ,WAAaA,EACrBR,EAAQS,WAAaA,EACrBT,EAAQU,UAgDRC,eAAyBJ,EAAOK,EAAYC,GAC1C,OAAOJ,EAAWK,KAAKC,UAAUR,GAAQK,EAAYC,EACvD,EAjDAb,EAAQgB,aAAeA,EACvBhB,EAAQiB,aAAeA,EACvBjB,EAAQkB,YAyERP,eAA2BQ,EAAMP,EAAYC,GAC3C,MAAMO,QAAgBH,EAAaE,EAAMP,EAAYC,GACrD,OAAOC,KAAKO,MAAMD,EACpB,EA3EA,IAAIE,EAAY,EAAQ,KAaxB,SAASC,EAAOC,EAAMC,GACpB,IAAKD,EACH,MAAM,IAAIE,MAAMD,GAAK,GAEzB,CAGA,SAASE,EAAWC,GAClB,OAAO,IAAIC,aAAcC,OAAOF,EAClC,CAIA,MAAMG,EAAqB,GAErBC,EAAwB,2BACxBC,EAAsB,CAAC,4BAC7B,SAASC,EAAeC,GAMtB,MALgB,CACd,IAAO,2BACP,UAAW,2BACX,UAAW,eAEEA,IAAWA,CAC5B,CAUAxB,eAAeF,EAAWU,EAAMP,EAAYC,GAC1C,GAAoB,iBAATM,EAAmB,MAAM,IAAIO,MAAM,kBAC9C,OAAOlB,EAAWmB,EAAWR,GAAOP,EAAYC,EAClD,CACA,SAASuB,EAAcC,GACrB,MAAoB,iBAANA,GAAkBhC,OAAOiC,eAAeD,KAAOhC,OAAOkC,SACtE,CAIA5B,eAAeH,EAAWW,EAAMP,EAAYC,GAC1C,KAAMM,aAAgBqB,YAAa,MAAM,IAAId,MAAM,mBAEnD,QADoB,IAATb,IAAsBA,EAAO,CAAC,IACpCuB,EAAcvB,GAAO,MAAM,IAAIa,MAAM,kCAE1C,GADAb,EAAKsB,OAAStB,EAAKsB,QAAUH,GACxBC,EAAoBQ,SAAS5B,EAAKsB,QAAS,MAAM,IAAIT,MAAM,0BAChE,MAAMgB,QAiJR/B,iBACE,MAAMgC,EAAS,IAAIH,WAAW,IAE9B,aADM,EAAIlB,EAAUsB,iBAAiBD,GAC9BA,CACT,CArJqBE,GACbC,QAAkBC,EAAoCL,EAAM9B,EAAYC,EAAKmC,UAAWnC,EAAKoC,QAEnG,GADApC,EAAKsB,OAASD,EAAerB,EAAKsB,QAE3B,6BADCtB,EAAKsB,OAET,OA0CNxB,eAA6CQ,EAAM2B,EAAWJ,GAC5D,MAAM,WACJQ,EAAU,aACVC,EAAY,cACZC,SACQC,EAA0BP,GAI9BQ,EAAgB,IAAId,iBAAiBlB,EAAUiC,OAAOC,QAAQ,CAClEC,KAAM,UACNC,GAAIR,GACHC,EAAchC,IACXwC,EAAS,IAAInB,WAAW,GAAgBc,EAAcM,WAAa,IACzED,EAAOE,IAAInB,EAAM,GACjBiB,EAAOE,IAAIP,EAAe,IAC1B,MAAMQ,EAAU,IAAItB,iBAAiBlB,EAAUiC,OAAOQ,KAAK,OAAQX,EAAeO,EAAOK,SAAS,EAAG,GAAKV,EAAcM,cAGxH,OAFArC,EAA8B,KAAvBuC,EAAQF,YACfD,EAAOE,IAAIC,EAAS,GAAKR,EAAcM,YAChCD,CACT,CA9DaM,CAA8B9C,EAAM2B,EAAWJ,GAE1D,MAAM,IAAIhB,MAAM,cAClB,CAKAf,eAAeM,EAAaE,EAAMP,EAAYC,GAC5C,MAAMqD,QAAsBlD,EAAaG,EAAMP,EAAYC,GAC3D,OAvDF,SAAoBM,GAClB,OAAO,IAAIgD,aAAcC,OAAOjD,EAClC,CAqDSkD,CAAW,IAAI7B,WAAW0B,GACnC,CACAvD,eAAeK,EAAaG,EAAMP,EAAYC,GAC5C,KAAMM,aAAgBqB,YAAa,MAAM,IAAId,MAAM,mBAEnD,QADoB,IAATb,IAAsBA,EAAO,CAAC,IACpCuB,EAAcvB,GAAO,MAAM,IAAIa,MAAM,kCAE1C,GADAb,EAAKsB,OAAStB,EAAKsB,QAAUH,GACxBC,EAAoBQ,SAAS5B,EAAKsB,QAAS,MAAM,IAAIT,MAAM,0BAEhE,GADAb,EAAKsB,OAASD,EAAerB,EAAKsB,QAE3B,6BADCtB,EAAKsB,OAET,OA0CNxB,eAA+CQ,EAAMP,EAAYC,GAC/D,GAAIM,EAAKyC,WAAa,GAAS,MAAM,IAAIlC,MAAM,mBAC/C,MAAMgB,EAAOvB,EAAK6C,SAAS,EAAG,IACxBM,EAAWnD,EAAK6C,SAAS,EAAG7C,EAAKyC,WAAa,IAC9CE,EAAU3C,EAAK6C,SAAS7C,EAAKyC,WAAa,IAChDrC,EAA0B,KAAnBuC,EAAQS,QAGf,MAAMzB,QAAkBC,EAAoCL,EAAM9B,EAAYC,EAAKmC,UAAWnC,EAAKoC,SAC7F,WACJC,EAAU,aACVC,EAAY,cACZC,SACQC,EAA0BP,GAMpC,IAAkB,UAFMxB,EAAUiC,OAAOiB,OAAO,OAAQpB,EAAeU,EAASQ,GAExD,MAAM,IAAI5C,MAAM,4DACxC,MAAM+C,EAAUtD,EAAK6C,SAAS,GAAI7C,EAAKyC,WAAa,IACpD,OAAOtC,EAAUiC,OAAOmB,QAAQ,CAC9BjB,KAAM,UACNC,GAAIR,GACHC,EAAcsB,EACnB,CAnEaE,CAAgCxD,EAAMP,EAAYC,GAE7D,MAAM,IAAIa,MAAM,cAClB,CACAf,eAAe0C,EAA0BP,GAWvC,MAAO,CACLI,iBA8GJvC,eAA8BiE,EAASC,GAErC,OADAtD,GAAOsD,GACA,IAAIrC,iBAAiBlB,EAAUiC,OAAOuB,WAAW,CACtDrB,KAAM,OACNsB,KAAM,UAENC,KAAMrD,EAAWkD,GACjBnC,KAAM,IAAIuC,YAAY,KACrBL,EAjI0F,KAkI/F,CAlI2BM,CAAepC,EAAW,0CAYjDK,mBAXyBgC,EAAoBrC,EAAW,2CAA4C,CACpGW,KAAM,UACNc,OAAQ,KACP,CAAC,UAAW,YASbnB,oBAR0B+B,EAAoBrC,EAAW,4CAA6C,CACtGW,KAAM,OACNsB,KAAM,UACNR,OAAQ,KACP,CAAC,OAAQ,WAMd,CAgDA5D,eAAeoC,EAAoCL,EAAM9B,EAAYwE,EAAQnC,GAC3E,GAAIrC,EAAY,CACd,QAAsB,IAAXqC,EAAwB,MAAM,IAAIvB,MAAM,wEAInD,GAH0B,iBAAfd,IACTA,EAAae,EAAWf,MAEpBA,aAAsB4B,YAAa,MAAM,IAAId,MAAM,yBAEzD,IADA0D,EAASC,KAAKC,MAAMF,GAAUrD,KAChB,CAACwD,IAAUC,MAAQJ,GAAU,EAAG,MAAM,IAAI1D,MAAM,qBAC9D,OAQJf,eAAiDJ,EAAOmC,EAAM0C,GAC5D,MAAMK,QAAyBnE,EAAUiC,OAAOmC,UAAU,MAAOnF,EAAO,UAAU,EAAO,CAAC,cACpFoF,QAAqBrE,EAAUiC,OAAOqC,UAAU,CACpDnC,KAAM,SACNsB,KAAM,UAENrC,OACAmD,WAAYT,GACXK,EASH,CACEhC,KAAM,UACNc,OAAQ,MAGV,EAAM,CAAC,UAAW,YAEZuB,QAAexE,EAAUiC,OAAOwC,UAAU,MAAOJ,GAGvD,OADApE,EAA6B,KAAtBuE,EAAOlC,YACPtC,EAAUiC,OAAOmC,UAAU,MAAOI,EAAQ,CAC/CrC,KAAM,OACNsB,KAAM,YAGL,EAAO,CAAC,YAAa,cAC1B,CAzCWiB,CAAkCpF,EAAY8B,EAAM0C,EAC7D,CAAO,GAAInC,EAAQ,CACjB,QAA0B,IAAfrC,EAA4B,MAAM,IAAIc,MAAM,wEACvD,KAAMuB,aAAkBT,YAAa,MAAM,IAAId,MAAM,0BACrDH,GAAO,EAAO,gBAChB,CACA,MAAM,IAAIG,MAAM,yDAClB,CAoDAf,eAAewE,EAAoBP,EAASC,EAAYoB,EAAgBC,GAEtE,OADA3E,EAAOsD,EAAWN,OAAS,GACpBjD,EAAUiC,OAAOqC,UAAU,CAChCnC,KAAM,OACNsB,KAAM,UACNC,KAAMrD,EAAWkD,GACjBnC,KAAM,IAAIuC,YAAY,KACrBL,EAASqB,GAAgB,EAAMC,EACpC,C,kGCpPA,MAAMC,EAAYC,WAAWC,OACvB9C,EAAS4C,EAAU5C,OACnB+C,EAAa,IACVH,EAAUG,aAEb1D,EAAmB2D,GAChBJ,EAAUvD,gBAAgB2D,GAE7BC,EAAU,CACdF,aACA1D,kBACAW,S,GCVEkD,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAa5G,QAGrB,IAAIC,EAASwG,EAAyBE,GAAY,CAGjD3G,QAAS,CAAC,GAOX,OAHA8G,EAAoBH,GAAU1G,EAAQA,EAAOD,QAAS0G,GAG/CzG,EAAOD,OACf,CCrBA0G,EAAoBK,EAAI,CAAC/G,EAASgH,KACjC,IAAI,IAAIC,KAAOD,EACXN,EAAoBrE,EAAE2E,EAAYC,KAASP,EAAoBrE,EAAErC,EAASiH,IAC5E5G,OAAOC,eAAeN,EAASiH,EAAK,CAAEC,YAAY,EAAMC,IAAKH,EAAWC,IAE1E,ECNDP,EAAoBrE,EAAI,CAAC+E,EAAKC,IAAUhH,OAAOkC,UAAU+E,eAAeC,KAAKH,EAAKC,GCClFX,EAAoBc,EAAKxH,IACH,oBAAXyH,QAA0BA,OAAOC,aAC1CrH,OAAOC,eAAeN,EAASyH,OAAOC,YAAa,CAAEnH,MAAO,WAE7DF,OAAOC,eAAeN,EAAS,aAAc,CAAEO,OAAO,GAAO,E,6BCH9DF,OAAOC,eAAeN,EAAS,aAAc,CAC3CO,OAAO,IAETF,OAAOC,eAAeN,EAAS,aAAc,CAC3CkH,YAAY,EACZC,IAAK,WACH,OAAOQ,EAAMnH,UACf,IAEFH,OAAOC,eAAeN,EAAS,aAAc,CAC3CkH,YAAY,EACZC,IAAK,WACH,OAAOQ,EAAMlH,UACf,IAEFJ,OAAOC,eAAeN,EAAS,YAAa,CAC1CkH,YAAY,EACZC,IAAK,WACH,OAAOQ,EAAMjH,SACf,IAEFL,OAAOC,eAAeN,EAAS,eAAgB,CAC7CkH,YAAY,EACZC,IAAK,WACH,OAAOQ,EAAM3G,YACf,IAEFX,OAAOC,eAAeN,EAAS,eAAgB,CAC7CkH,YAAY,EACZC,IAAK,WACH,OAAOQ,EAAM1G,YACf,IAEFZ,OAAOC,eAAeN,EAAS,cAAe,CAC5CkH,YAAY,EACZC,IAAK,WACH,OAAOQ,EAAMzG,WACf,IAEF,IAAIyG,EAAQ,EAAQ,I","sources":["webpack://cryptoSeal/webpack/universalModuleDefinition","webpack://cryptoSeal/./build/seal.js","webpack://cryptoSeal/./node_modules/uncrypto/dist/crypto.web.mjs","webpack://cryptoSeal/webpack/bootstrap","webpack://cryptoSeal/webpack/runtime/define property getters","webpack://cryptoSeal/webpack/runtime/hasOwnProperty shorthand","webpack://cryptoSeal/webpack/runtime/make namespace object","webpack://cryptoSeal/./build/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"cryptoSeal\"] = factory();\n\telse\n\t\troot[\"cryptoSeal\"] = factory();\n})(self, () => {\nreturn ","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sealBuffer = sealBuffer;\nexports.sealString = sealString;\nexports.sealValue = sealValue;\nexports.unsealBuffer = unsealBuffer;\nexports.unsealString = unsealString;\nexports.unsealValue = unsealValue;\nvar _uncrypto = require(\"uncrypto\");\n//import { TextEncoder, TextDecoder } from 'util';\n// XXX TODO TextEncoder in the browser is somewhere else, see how uncrypto does conditional imports.\n\n// TODO:\n// gen typigs into separate folder,\n// make separate branch that cntain the babel and the dist for npm install and unpkg/jsdelivr.\n// put gen files in gitignore here\n// generate webpack mappings\n// make sure typings are accesible after an npm install of this library.\n// remove uncrypto dep and see if the util textencoder is ok to assume it's global.\n\n// XXX\nfunction assert(cond, s) {\n  if (!cond) {\n    throw new Error(s || \"\");\n  }\n}\n\n// XXX base64decode base64encode hexEncode hexDecode\nfunction utf8Encode(str) {\n  return new TextEncoder().encode(str);\n}\nfunction utf8Decode(data) {\n  return new TextDecoder().decode(data);\n}\nconst DEFAULT_KDF_ROUNDS = 10; // XXX\n\nconst DEFAULT_CIPHER_STRING = 'AES-256-CBC-HMAC-SHA-256';\nconst CIPHER_STRINGS_LIST = ['AES-256-CBC-HMAC-SHA-256'];\nfunction mapCipherAlias(cipher) {\n  const aliases = {\n    'AES': 'AES-256-CBC-HMAC-SHA-256',\n    'AES-CBC': 'AES-256-CBC-HMAC-SHA-256',\n    'AES-GCM': 'AES-256-GCM'\n  };\n  return aliases[cipher] || cipher;\n}\n\n// XXX advanced sealopts values: deconstruct {outputSalt, outputAuthTag...}, maybe, maybe not.\n\nasync function debugDumpKeyObj(s, key) {\n  console.log(s, await _uncrypto.subtle.exportKey('raw', key));\n}\nasync function sealValue(value, passphrase, opts) {\n  return sealString(JSON.stringify(value), passphrase, opts);\n}\nasync function sealString(data, passphrase, opts) {\n  if (typeof data !== 'string') throw new Error(\"Invalid 'data'\");\n  return sealBuffer(utf8Encode(data), passphrase, opts);\n}\nfunction isPlainObject(o) {\n  return typeof o === 'object' && Object.getPrototypeOf(o) === Object.prototype;\n}\n\n// XXX consider using BufferSource as parameters like the web api\n// XXX dealloc keys as soon as they're not neeeded. and memset them to 0 first!\nasync function sealBuffer(data, passphrase, opts) {\n  if (!(data instanceof Uint8Array)) throw new Error(\"Invalid 'data'.\");\n  if (typeof opts === 'undefined') opts = {};\n  if (!isPlainObject(opts)) throw new Error(\"'opts' must be a plain object.\");\n  opts.cipher = opts.cipher || DEFAULT_CIPHER_STRING;\n  if (!CIPHER_STRINGS_LIST.includes(opts.cipher)) throw new Error(\"Invalid 'opts.cipher'.\");\n  const salt = await randomSalt();\n  const masterKey = await getHKDFKeyObjectFromPassphraseOrKey(salt, passphrase, opts.kdfRounds, opts.rawKey);\n  opts.cipher = mapCipherAlias(opts.cipher);\n  switch (opts.cipher) {\n    case 'AES-256-CBC-HMAC-SHA-256':\n      return sealBufferAes256CbcHmacSha256(data, masterKey, salt);\n  }\n  throw new Error('UNREACHABLE');\n}\nasync function unsealValue(data, passphrase, opts) {\n  const jsonStr = await unsealString(data, passphrase, opts);\n  return JSON.parse(jsonStr);\n}\nasync function unsealString(data, passphrase, opts) {\n  const decryptedData = await unsealBuffer(data, passphrase, opts);\n  return utf8Decode(new Uint8Array(decryptedData)); // XXX\n}\nasync function unsealBuffer(data, passphrase, opts) {\n  if (!(data instanceof Uint8Array)) throw new Error(\"Invalid 'data'.\");\n  if (typeof opts === 'undefined') opts = {};\n  if (!isPlainObject(opts)) throw new Error(\"'opts' must be a plain object.\");\n  opts.cipher = opts.cipher || DEFAULT_CIPHER_STRING;\n  if (!CIPHER_STRINGS_LIST.includes(opts.cipher)) throw new Error(\"Invalid 'opts.cipher'.\");\n  opts.cipher = mapCipherAlias(opts.cipher);\n  switch (opts.cipher) {\n    case 'AES-256-CBC-HMAC-SHA-256':\n      return unsealBufferAes256CbcHmacSha256(data, passphrase, opts);\n  }\n  throw new Error('UNREACHABLE');\n}\nasync function aes256CbcHmacSha256Derive(masterKey) {\n  const cipherSalt = await hkdfDeriveBits(masterKey, '/v1/seal/AES-256-CBC-HMAC-SHA-256/salt', 128);\n  const cipherEncKey = await hkdfDeriveKeyObject(masterKey, '/v1/seal/AES-256-CBC-HMAC-SHA-256/enckey', {\n    name: 'AES-CBC',\n    length: 256\n  }, ['encrypt', 'decrypt']);\n  const cipherAuthKey = await hkdfDeriveKeyObject(masterKey, '/v1/seal/AES-256-CBC-HMAC-SHA-256/authkey', {\n    name: 'HMAC',\n    hash: 'SHA-256',\n    length: 256\n  }, ['sign', 'verify']);\n  return {\n    cipherSalt,\n    cipherEncKey,\n    cipherAuthKey\n  };\n}\nasync function sealBufferAes256CbcHmacSha256(data, masterKey, salt) {\n  const {\n    cipherSalt,\n    cipherEncKey,\n    cipherAuthKey\n  } = await aes256CbcHmacSha256Derive(masterKey);\n\n  //await debugDumpKeyObj('seal auth key:', cipherAuthKey);\n\n  const encryptedBlob = new Uint8Array(await _uncrypto.subtle.encrypt({\n    name: 'AES-CBC',\n    iv: cipherSalt\n  }, cipherEncKey, data));\n  const result = new Uint8Array(16 /* salt */ + encryptedBlob.byteLength + 32 /* auth tag */);\n  result.set(salt, 0);\n  result.set(encryptedBlob, 16);\n  const authTag = new Uint8Array(await _uncrypto.subtle.sign('HMAC', cipherAuthKey, result.subarray(0, 16 + encryptedBlob.byteLength)));\n  assert(authTag.byteLength === 32);\n  result.set(authTag, 16 + encryptedBlob.byteLength);\n  return result;\n}\nasync function unsealBufferAes256CbcHmacSha256(data, passphrase, opts) {\n  if (data.byteLength < 16 + 32) throw new Error(\"Invalid 'data'.\");\n  const salt = data.subarray(0, 16);\n  const authData = data.subarray(0, data.byteLength - 32);\n  const authTag = data.subarray(data.byteLength - 32);\n  assert(authTag.length === 32);\n  //console.log('unseal auth tag:', authTag);\n\n  const masterKey = await getHKDFKeyObjectFromPassphraseOrKey(salt, passphrase, opts.kdfRounds, opts.rawKey);\n  const {\n    cipherSalt,\n    cipherEncKey,\n    cipherAuthKey\n  } = await aes256CbcHmacSha256Derive(masterKey);\n\n  //await debugDumpKeyObj('unseal auth key:', cipherAuthKey);\n\n  const verifyRes = await _uncrypto.subtle.verify('HMAC', cipherAuthKey, authTag, authData);\n  //console.log('////// verifyRes', verifyRes);\n  if (verifyRes !== true) throw new Error(\"Invalid 'data' (authentication tag verification failed).\");\n  const encData = data.subarray(16, data.byteLength - 32); // XXX what happens if empty?\n  return _uncrypto.subtle.decrypt({\n    name: 'AES-CBC',\n    iv: cipherSalt\n  }, cipherEncKey, encData);\n}\nasync function getHKDFKeyObjectFromPassphraseOrKey(salt, passphrase, rounds, rawKey) {\n  if (passphrase) {\n    if (typeof rawKey !== 'undefined') throw new Error(\"You can either provide a 'passphrase' or an 'opts.rawKey', not both.\");\n    if (typeof passphrase === 'string') {\n      passphrase = utf8Encode(passphrase);\n    }\n    if (!(passphrase instanceof Uint8Array)) throw new Error(\"Invalid 'passphrase'.\");\n    rounds = Math.floor(rounds || DEFAULT_KDF_ROUNDS);\n    if (rounds in [Infinity, NaN] || rounds <= 0) throw new Error(\"Invalid 'rounds'.\");\n    return deriveHKDFKeyObjectFromPassphrase(passphrase, salt, rounds);\n  } else if (rawKey) {\n    if (typeof passphrase !== 'undefined') throw new Error(\"You can either provide a 'passphrase' or an 'opts.rawKey', not both.\");\n    if (!(rawKey instanceof Uint8Array)) throw new Error(\"Invalid 'opts.rawKey'.\");\n    assert(false, \"UNIMPLEMENTED\");\n  }\n  throw new Error(\"Either 'passphrase' or 'opts.rawKey' must be provided.\");\n}\nasync function deriveHKDFKeyObjectFromPassphrase(value, salt, rounds) {\n  const passphraseKeyObj = await _uncrypto.subtle.importKey('raw', value, 'PBKDF2', false, ['deriveKey']);\n  const tmpKeyObject = await _uncrypto.subtle.deriveKey({\n    name: 'PBKDF2',\n    hash: 'SHA-256',\n    // XXX think about this.\n    salt,\n    iterations: rounds\n  }, passphraseKeyObj,\n  // XXX workaround https://github.com/nodejs/node/issues/56931\n  // {\n  //     name: 'HMAC', // 'HKDF'\n  //     hash: 'SHA-256', // XXX think about this.\n  //     //info: (new TextEncoder()).encode('TODO'), // XXX\n  //     //salt: new ArrayBuffer(32), // XXX\n  //     //length: 32, // XXX\n  // },\n  {\n    name: \"AES-GCM\",\n    length: 256\n  },\n  // WORKAROUND\n  true, ['encrypt', 'decrypt'] // not true\n  );\n  const tmpKey = await _uncrypto.subtle.exportKey('raw', tmpKeyObject);\n  //console.log('tmpKEy:', tmpKey);\n  assert(tmpKey.byteLength === 32);\n  return _uncrypto.subtle.importKey('raw', tmpKey, {\n    name: 'HKDF',\n    hash: 'SHA-256'\n    // length: 32, defaults to length of digest output.\n    //length: 256,\n  }, false, ['deriveKey', 'deriveBits']);\n}\nasync function randomSalt() {\n  const buffer = new Uint8Array(16); // XXX maybe digest it.\n  await (0, _uncrypto.getRandomValues)(buffer);\n  return buffer;\n}\n\n// XXX return value type, in all funcs\nasync function hkdfDeriveBits(hkdfKey, derivePath, nbits) {\n  assert(derivePath.length > 0);\n  return new Uint8Array(await _uncrypto.subtle.deriveBits({\n    name: 'HKDF',\n    hash: 'SHA-256',\n    // XXX\n    info: utf8Encode(derivePath),\n    salt: new ArrayBuffer(16)\n  }, hkdfKey, nbits));\n}\nasync function hkdfDeriveKeyObject(hkdfKey, derivePath, derivedKeyType, keyUsage) {\n  assert(derivePath.length > 0);\n  return _uncrypto.subtle.deriveKey({\n    name: 'HKDF',\n    hash: 'SHA-256',\n    info: utf8Encode(derivePath),\n    salt: new ArrayBuffer(16) // 16 zeroes, because the hkdfKey should already be salty enough.\n  }, hkdfKey, derivedKeyType, true, keyUsage); // XXX set extractable to false after debugging.\n}","const webCrypto = globalThis.crypto;\nconst subtle = webCrypto.subtle;\nconst randomUUID = () => {\n  return webCrypto.randomUUID();\n};\nconst getRandomValues = (array) => {\n  return webCrypto.getRandomValues(array);\n};\nconst _crypto = {\n  randomUUID,\n  getRandomValues,\n  subtle\n};\n\nexport { _crypto as default, getRandomValues, randomUUID, subtle };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"sealBuffer\", {\n  enumerable: true,\n  get: function get() {\n    return _seal.sealBuffer;\n  }\n});\nObject.defineProperty(exports, \"sealString\", {\n  enumerable: true,\n  get: function get() {\n    return _seal.sealString;\n  }\n});\nObject.defineProperty(exports, \"sealValue\", {\n  enumerable: true,\n  get: function get() {\n    return _seal.sealValue;\n  }\n});\nObject.defineProperty(exports, \"unsealBuffer\", {\n  enumerable: true,\n  get: function get() {\n    return _seal.unsealBuffer;\n  }\n});\nObject.defineProperty(exports, \"unsealString\", {\n  enumerable: true,\n  get: function get() {\n    return _seal.unsealString;\n  }\n});\nObject.defineProperty(exports, \"unsealValue\", {\n  enumerable: true,\n  get: function get() {\n    return _seal.unsealValue;\n  }\n});\nvar _seal = require(\"./seal\");"],"names":["root","factory","exports","module","define","amd","self","Object","defineProperty","value","sealBuffer","sealString","sealValue","async","passphrase","opts","JSON","stringify","unsealBuffer","unsealString","unsealValue","data","jsonStr","parse","_uncrypto","assert","cond","s","Error","utf8Encode","str","TextEncoder","encode","DEFAULT_KDF_ROUNDS","DEFAULT_CIPHER_STRING","CIPHER_STRINGS_LIST","mapCipherAlias","cipher","isPlainObject","o","getPrototypeOf","prototype","Uint8Array","includes","salt","buffer","getRandomValues","randomSalt","masterKey","getHKDFKeyObjectFromPassphraseOrKey","kdfRounds","rawKey","cipherSalt","cipherEncKey","cipherAuthKey","aes256CbcHmacSha256Derive","encryptedBlob","subtle","encrypt","name","iv","result","byteLength","set","authTag","sign","subarray","sealBufferAes256CbcHmacSha256","decryptedData","TextDecoder","decode","utf8Decode","authData","length","verify","encData","decrypt","unsealBufferAes256CbcHmacSha256","hkdfKey","derivePath","deriveBits","hash","info","ArrayBuffer","hkdfDeriveBits","hkdfDeriveKeyObject","rounds","Math","floor","Infinity","NaN","passphraseKeyObj","importKey","tmpKeyObject","deriveKey","iterations","tmpKey","exportKey","deriveHKDFKeyObjectFromPassphrase","derivedKeyType","keyUsage","webCrypto","globalThis","crypto","randomUUID","array","_crypto","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","enumerable","get","obj","prop","hasOwnProperty","call","r","Symbol","toStringTag","_seal"],"sourceRoot":""}